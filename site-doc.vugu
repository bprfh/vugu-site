
<section class="site-doc">


    <!-- hero -->
    <section class="hero bg-blue">
      <div class="container">
        <div class="row">
          <div class="col-md-8 text-white mb-3">
            <h1 class="h2 pb-1 pt-2" vg-html="data.siteDocPage().LongTitle"></h1>
            <nav aria-label="breadcrumb">
              <ol class="breadcrumb breadcrumb-minimal">
                <li class="breadcrumb-item"><a href="/" @click='router.BrowseTo("/", event)'>Home</a></li>
                <li class="breadcrumb-item"><a href="/doc" @click='router.BrowseTo("/doc", event)'>Doc</a></li>
                <li vg-if='data.siteDocPage().Path!="/doc"' class="breadcrumb-item active" vg-html="data.siteDocPage().ShortTitle"></li>
              </ol>
            </nav>
          </div>
        </div>
      </div>
    </section>
    <!-- / hero -->


    <!-- sidebar layout -->
    <section class="">
      <div class="container overlay-item-top">
        <div class="row">
          <div class="col">
            <div class="content boxed">
              <div class="row separated">

                <!-- content -->

                <article class="col-md-8 content-body" vg-if='data.siteDocPage().Path=="/doc"'>

                    <p>Vugu is Go library which makes it easy to write web user interfaces in Go.</p>

                    <p>The basic idea is as follows:</p>

                    <ul>

                      <li><strong>You write UI components in .vugu files</strong>.  These files are similar to UI components you might see in
                        JavaScript frameworks (e.g. .vue files).  However, they contain no JavaScript and instead have Go language expressions for
                        <code>if</code>, <code>for</code> and other such functionality.<br/>&nbsp;
                      </li>

                      <li>
                        <strong>Each .vugu file is converted to a corresponding .go file.</strong>  There is a development server in the Vugu project
                        which can do this for you automatically on page reload, or the <code>vugugen</code> command line tool can be used to integrate
                        with <code>go generate</code>.  The code generation also attempts to provide sensible defaults where needed so your .vugu
                        files contain as little boilerplate as possible, while still allowing extensive customization if desired.
                         <br/>&nbsp;
                      </li>

                      <li>
                        <strong>Your project is compiled to a WebAssembly module and run in the browser.</strong>  Again, the development server makes this easy to 
                        do when starting a project.  As your project evolves and you need to customize parts of this process you can easily do so.<br/>&nbsp;
                      </li>

                      <li>
                        <strong>The Vugu library</strong> (package: <a target="_blank" href="https://github.com/vugu/vugu">github.com/vugu/vugu</a>)
                        <strong>provides functionality to efficiently synchronize the HTML DOM</strong> on the web page according to the markup 
                        in your .vugu files.  Features like attaching DOM event handlers (click, etc.) and breaking large pages up into components 
                        are supported.
                      </li>

                    </ul>

                </article>

                <article class="col-md-8 content-body" vg-if='data.siteDocPage().Path=="/doc/start"'>

                    <p>
                      Let's make a basic working Vugu application that runs your browser.  It 
                      only takes three small files to start.  Make sure you have at least <strong>Go 1.12</strong> installed.
                    </p>

                  <section id="section-1">
                    <!-- <h2 class="section-title-2">Quick Start <a data-scroll href="#section-2" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2> -->
                    <ol class="step-list">
                      <li><div>
                        <p>
                          <strong>Create a new empty folder anywhere you like.</strong>  We'll use the name <code>testapp</code> as an example. 
                          Each file you create will be directly in this folder, no subfolders are needed.
                        </p>
                      </div></li>
                      <li><div>
                        <p><strong>Create</strong> <code>go.mod</code> containing only the line:</p>
                        <p>
                          <pre><code>module main
</code></pre>
                        </p>
                      </div></li>
                      <li><div>
                        <p>
                          <strong>Create a Vugu component file.</strong>
                          We'll put a click handler and an element that toggles to demonstrate some basic functionality.
                          This first component should be called <code>root.vugu</code>:
                          <pre><code>&lt;div class="my-first-vugu-comp">
    &lt;button @click="data.Toggle()">Test&lt;/button>
    &lt;div vg-if="data.Show">I am here!&lt;/div>
&lt;/div>

&lt;style>
.my-first-vugu-comp { background: #eee; }
&lt;/style>

&lt;script type="application/x-go">
type RootData struct { Show bool }
func (data *RootData) Toggle() { data.Show = !data.Show }
&lt;/script>
</code></pre>
                        </p>
                      </div></li>
                      <li><div>
                        <p><strong>Create a development server file.</strong>  Note that this file does not get compiled to WebAssembly,
                          this is just to make it easy to build and serve your program up to the browser during development.
                          <code>devserver.go</code>:
                        <p><pre><code>// +build ignore

package main

import (
    "os"
    "log"
    "net/http"

    "github.com/vugu/vugu"
)

func main() {
    wd, _ := os.Getwd()
    l := "127.0.0.1:8844"
    log.Printf("Starting HTTP Server at %q", l)
    h := vugu.NewDevHTTPHandler(wd, http.Dir(wd))
    log.Fatal(http.ListenAndServe(l, h))
}
</code></pre>
                        </p>
                      </div></li>
                      <li><div>
                        <p><strong>Run the development server</strong>.
                          While in the same directory, run the command <code>go run devserver.go</code></p>
                        <p>After a few brief moments, the server should start.  It works the same on 
                          Windows, Linux or Mac.</p>
                      </div></li>
                      <li><div>
                          <p><strong>Browse to it</strong>: <a target="_blank" href="http://127.0.0.1:8844/">http://127.0.0.1:8844/</a>
                        </div></li>
                      <li><div>
                          <p>Marvel at the wonder you have created.
                        </div></li>
  
                    </ol>
                  </section>

                </article>

                <article class="col-md-8 content-body" vg-if='data.siteDocPage().Path=="/doc/files"'>

                    <p>Vugu Files</p>

                </article>

                <article class="col-md-8 content-body" vg-if='data.siteDocPage().Path=="/doc/program"'>

                    <p>Program Overview (incl: Render loop)</p>

                </article>

                <article class="col-md-8 content-body" vg-if='data.siteDocPage().Path=="/doc/dom-events"'>

                    <p>DOM events</p>

                </article>

                <article class="col-md-8 content-body" vg-if='data.siteDocPage().Path=="/doc/components"'>

                    <p>Components</p>

                </article>
                
                <article class="col-md-8 content-body" vg-if='data.siteDocPage().Path=="/doc/build-and-dist"'>

                    <p>Build and Dist</p>

                </article>
                

                
                <!--
                <article class="col-md-8 content-body">

                  <p>You can change a domain's contact information at any time. Domains have four sets of contacts, which are listed below after the instructions.</p>

                  <div class="alert alert-warning" role="alert">
                    <i class="icon-alert-circle"></i>
                    <h4 class="fs-22">Tip</h4>
                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos minus, qui error eveniet! Et consequuntur fugit nulla nam</p>
                  </div>

                  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Id illo eveniet blanditiis aliquam voluptatem quaerat sapiente alias ex pariatur quasi, ipsa dolorem impedit nemo eius, hic est magnam quisquam soluta!</p>


                  <section id="section-1">
                    <h2 class="section-title-2">Quick Start <a data-scroll href="#section-2" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2>
                    <ol class="step-list">
                      <li><div>
                        <p>Go to the <a href="" class="external">Domains Settings</a> page.</p>
                      </div></li>
                      <li><div>
                        <p>Under Contact Information, click Edit. (Note: if you don't see the Edit link, you may have Domain Privacy turned on. Click the View personal information link, and then you'll be able to click the Edit link.)</p>
                      </div>
                        <ol>
                          <li><div>
                            <p>To edit All Contacts, enter the Contact, Address, Phone, and Email information you want to update, and then click OK.</p>
                          </div></li>
                          <li><div>
                            <p>To edit each individual contact, clear the Use for all contact types check box and enter the information you want to update.</p>
                          </div></li>
                        </ol>
                      </li>
                      <li><div>
                        <p>Click Save</p>
                      </div></li>
                    </ol>
                  </section>


                  <section id="section-2">
                    <h2 class="section-title-2">Video Preview <a data-scroll href="#section-2" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2>
                    <div class="row">
                      <div class="col-12">
                        <video
                          id="video"
                          class="youtube video-js vjs-default-skin video-16-9"
                          controls
                          width="640" height="264"
                          data-setup='{ "techOrder": ["youtube"], "sources": [{ "type": "video/youtube", "src": "https://www.youtube.com/watch?v=DkeiKbqa02g"}], "youtube": { "ytControls": 2 } }'
                        >
                        </video>
                      </div>
                    </div>
                  </section>


                  <section id="section-3">
                    <h2 class="section-title-2">Typography <a data-scroll href="#section-3" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2>
                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Molestiae debitis dicta, dolorum modi aliquam praesentium, molestias! Quibusdam magni natus eligendi, delectus odit, veritatis dignissimos voluptate dolorum vitae laborum fuga? Facilis.</p>
                    <div class="row gutter-2">
                      <div class="col-8 col-md-5">
                        <div class="type boxed">
                          <div>
                            <span class="badge badge-primary">New</span>
                            <h5 class="type-title">Open Sans</h5>
                            <div class="type-example">
                              <span>Ab</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="col-8 col-md-5">
                        <div class="type bordered">
                          <div>
                            <h5 class="type-title">Open Sans</h5>
                            <div class="type-example">
                              <span>Ab</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </section>

                  <section id="section-4">
                    <h2 class="section-title-2">File Tree <a data-scroll href="#section-4" class="anchor" data-toggle="tooltip" data-placement="top" title="Copy URL"><i class="icon-hash"></i></a></h2>
                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Suscipit magnam exercitationem fugit doloremque ut, neque nobis fuga voluptatum minima officiis iure consectetur nemo maiores, hic qui rem quae dolor dolorem.</p>
                    <div class="row">
                      <div class="col-md-8">
                        <div class="bordered p-2 p-md-5">
                          <ul class="file-tree">
                            <li class="file-tree-folder empty">Images
                              <span>description</span>
                            </li>
                            <li class="file-tree-folder">CSS
                              <span>description</span>
                              <ul>
                                <li>file name <span>description</span></li>
                                <li>file name <span>description</span></li>
                              </ul>
                            </li>
                            <li class="file-tree-folder">HTML
                              <span>description</span>
                              <ul>
                                <li class="file-tree-folder">PAGES
                                  <span>description</span>
                                  <ul>
                                    <li>file name <span>description</span></li>
                                    <li>file name <span>description</span></li>
                                    <li>file name <span>description</span></li>
                                  </ul>
                                </li>
                                <li>file name <span>description</span></li>
                                <li>file name <span>description</span></li>
                              </ul>
                            </li>
                            <li>index.html <span>description</span></li>
                            <li>components.html <span>description</span></li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </section>

                </article>
                -->


                <!-- / content -->


                <!-- sidebar -->
                <aside class="col-md-4 content-aside bg-light">
                  <div class="widget">
                    <h3 class="widget-title">Documentation</h3>
                    <div class="list-group list-group-related">

                      <a vg-for="siteDocPages" :href="value.Path" @click="router.BrowseTo(value.Path, event)" class="list-group-item list-group-item-action d-flex align-items-center active">
                        <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                        <span vg-html="value.ShortTitle"></span>
                      </a>

                      <!--
                      <a href="#" class="list-group-item list-group-item-action d-flex align-items-center active">
                        <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                        Registering Domain Names
                      </a>
                      <a href="#" class="list-group-item list-group-item-action d-flex align-items-center active">
                        <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                        What's the difference between a domain and a website?
                      </a>
                      <a href="#" class="list-group-item list-group-item-action d-flex align-items-center active">
                        <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                        What is protected registration ?
                      </a>
                      <a href="#" class="list-group-item list-group-item-action d-flex align-items-center active">
                        <i class="fs-20 icon-file-text2 text-primary mr-1"></i>
                        Transfer domain to another registrar
                      </a>
                      -->
                    </div>
                  </div>

                </aside>
                <!-- / sidebar -->


              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    <!-- / sidebar layout -->




    <!-- TODO: this is kinda cool, see if we can hack it in later -->
    <!-- interpost -->
    <section class="bg-dark text-white separator-bottom p-0">
      <div class="container">
        <div class="row gutter-0">
          <div class="col-12 col-md-6">
            <br/>
            <!-- <h4 class="interpost interpost-prev"><a href="">Forwarding your incoming support email to Zendesk using Yahoo</a></h4> -->
          </div>
          <div class="col-12 col-md-6 text-right">
            <h4 class="interpost interpost-next" vg-if='data.nextSiteDocPage().Path!=""'>
              <a :href="data.nextSiteDocPage().Path" @click='router.BrowseTo(data.nextSiteDocPage().Path, event)' vg-html="data.nextSiteDocPage().LongTitle"></a>
            </h4>
          </div>
        </div>
      </div>
    </section>
    <!-- / interpost -->





</section>


<script type="application/x-go">

type siteDocPage struct {
  Path string
  ShortTitle string 
  LongTitle string
}

var siteDocPages = []siteDocPage {
  siteDocPage {
    Path: "/doc",
    ShortTitle: "Docs",
    LongTitle: "What is Vugu?",
  },
  siteDocPage {
    Path: "/doc/start",
    ShortTitle: "Getting Started",
    LongTitle: "Getting Started",
  },
  siteDocPage {
    Path: "/doc/files",
    ShortTitle: "Vugu Files",
    LongTitle: "Vugu Files",
  },
  siteDocPage {
    Path: "/doc/program",
    ShortTitle: "Program Structure",
    LongTitle: "Vugu Program Structure",
  },
  siteDocPage {
    Path: "/doc/dom-events",
    ShortTitle: "DOM Events",
    LongTitle: "DOM Events",
  },
  siteDocPage {
    Path: "/doc/components",
    ShortTitle: "Components",
    LongTitle: "Components",
  },
  siteDocPage {
    Path: "/doc/build-and-dist",
    ShortTitle: "Building and Distribution",
    LongTitle: "Building and Distribution",
  },
}

type SiteDocData struct {}

func (data *SiteDocData) nextSiteDocPage() (ret siteDocPage) {
  p := router.Path()
  for i, pg := range siteDocPages {
    if pg.Path == p {
      if i < len(siteDocPages)-1 {
        return siteDocPages[i+1]
      }
    }
  }
  return
}

func (data *SiteDocData) siteDocPage() (ret siteDocPage) {
  p := router.Path()
  for _, pg := range siteDocPages {
    if pg.Path == p {
      return pg
    }
  }
  return
}

</script>